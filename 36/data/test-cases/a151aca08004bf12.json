{
  "uid" : "a151aca08004bf12",
  "name" : "Проверка возможности совершить покупку единственного товара",
  "fullName" : "tests.Buying.test_success_buying_one_product#test_success_buying_one_product",
  "historyId" : "85bbb20ed1c7cc57366be5b1937981be",
  "time" : {
    "start" : 1639937658987,
    "stop" : 1639937662554,
    "duration" : 3567
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"btn red btn-small\">...</button> is not clickable at point (112, 371). Other element would receive the click: <div id=\"toast-container\">...</div>\n  (Session info: headless chrome=96.0.4664.110)\nStacktrace:\n#0 0x55e226d18ee3 <unknown>\n#1 0x55e2267e6608 <unknown>\n#2 0x55e226824044 <unknown>\n#3 0x55e226821af4 <unknown>\n#4 0x55e22681f2da <unknown>\n#5 0x55e22681dce2 <unknown>\n#6 0x55e2268117b8 <unknown>\n#7 0x55e22683a272 <unknown>\n#8 0x55e226811063 <unknown>\n#9 0x55e22683a37e <unknown>\n#10 0x55e22684d3bc <unknown>\n#11 0x55e22683a163 <unknown>\n#12 0x55e22680fbfc <unknown>\n#13 0x55e226810c05 <unknown>\n#14 0x55e226d4abaa <unknown>\n#15 0x55e226d60651 <unknown>\n#16 0x55e226d4bb05 <unknown>\n#17 0x55e226d61a68 <unknown>\n#18 0x55e226d4005f <unknown>\n#19 0x55e226d7c818 <unknown>\n#20 0x55e226d7c998 <unknown>\n#21 0x55e226d97eed <unknown>\n#22 0x7fe41aaf4609 <unknown>",
  "statusTrace" : "app = <fixtures.application.Application object at 0x7f1e3b904550>\n\n    @allure.epic(\"Продуктовый магазин\")\n    @allure.feature(\"Покупка продуктов\")\n    @allure.title(\"Проверка возможности совершить покупку единственного товара\")\n    def test_success_buying_one_product(app):\n        with allure.step(\"Открыть страницу магазина\"):\n            app.main_page.open_page(\"\")\n        with allure.step(\"Набрать продуктов в корзину\"):\n            app.main_page.random_click_on_buying_one_product()\n        with allure.step(\"Открыть корзину\"):\n            app.main_page.click_basket_icon()\n            app.basket_form.basket_form_is_opened()\n        with allure.step(\"Проверить, что в корзине находятся товары\"):\n            assert app.basket_form.check_shopping_list() != \"Cart is Empty\"\n        with allure.step(\"Нажать кнопку покупки\"):\n>           app.basket_form.click_buying_btn()\n\ntests/Buying/test_success_buying_one_product.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/basket_form.py:48: in click_buying_btn\n    self.find_clickable_element(BasketFormLocator.BUY_BTN).click()\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py:81: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py:710: in _execute\n    return self._parent.execute(command, params)\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:424: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1e3b926f40>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55e226d7c998 \\\\u003Cunknown>\\\\n#21 0x55e226d97eed \\\\u003Cunknown>\\\\n#22 0x7fe41aaf4609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"btn red btn-small\">...</button> is not clickable at point (112, 371). Other element would receive the click: <div id=\"toast-container\">...</div>\nE         (Session info: headless chrome=96.0.4664.110)\nE       Stacktrace:\nE       #0 0x55e226d18ee3 <unknown>\nE       #1 0x55e2267e6608 <unknown>\nE       #2 0x55e226824044 <unknown>\nE       #3 0x55e226821af4 <unknown>\nE       #4 0x55e22681f2da <unknown>\nE       #5 0x55e22681dce2 <unknown>\nE       #6 0x55e2268117b8 <unknown>\nE       #7 0x55e22683a272 <unknown>\nE       #8 0x55e226811063 <unknown>\nE       #9 0x55e22683a37e <unknown>\nE       #10 0x55e22684d3bc <unknown>\nE       #11 0x55e22683a163 <unknown>\nE       #12 0x55e22680fbfc <unknown>\nE       #13 0x55e226810c05 <unknown>\nE       #14 0x55e226d4abaa <unknown>\nE       #15 0x55e226d60651 <unknown>\nE       #16 0x55e226d4bb05 <unknown>\nE       #17 0x55e226d61a68 <unknown>\nE       #18 0x55e226d4005f <unknown>\nE       #19 0x55e226d7c818 <unknown>\nE       #20 0x55e226d7c998 <unknown>\nE       #21 0x55e226d97eed <unknown>\nE       #22 0x7fe41aaf4609 <unknown>\n\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:247: ElementClickInterceptedException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "screenshot_after_test",
    "time" : {
      "start" : 1639937658987,
      "stop" : 1639937658987,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1639937648277,
      "stop" : 1639937648304,
      "duration" : 27
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "app",
    "time" : {
      "start" : 1639937648304,
      "stop" : 1639937649157,
      "duration" : 853
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"btn red btn-small\">...</button> is not clickable at point (112, 371). Other element would receive the click: <div id=\"toast-container\">...</div>\n  (Session info: headless chrome=96.0.4664.110)\nStacktrace:\n#0 0x55e226d18ee3 <unknown>\n#1 0x55e2267e6608 <unknown>\n#2 0x55e226824044 <unknown>\n#3 0x55e226821af4 <unknown>\n#4 0x55e22681f2da <unknown>\n#5 0x55e22681dce2 <unknown>\n#6 0x55e2268117b8 <unknown>\n#7 0x55e22683a272 <unknown>\n#8 0x55e226811063 <unknown>\n#9 0x55e22683a37e <unknown>\n#10 0x55e22684d3bc <unknown>\n#11 0x55e22683a163 <unknown>\n#12 0x55e22680fbfc <unknown>\n#13 0x55e226810c05 <unknown>\n#14 0x55e226d4abaa <unknown>\n#15 0x55e226d60651 <unknown>\n#16 0x55e226d4bb05 <unknown>\n#17 0x55e226d61a68 <unknown>\n#18 0x55e226d4005f <unknown>\n#19 0x55e226d7c818 <unknown>\n#20 0x55e226d7c998 <unknown>\n#21 0x55e226d97eed <unknown>\n#22 0x7fe41aaf4609 <unknown>",
    "statusTrace" : "app = <fixtures.application.Application object at 0x7f1e3b904550>\n\n    @allure.epic(\"Продуктовый магазин\")\n    @allure.feature(\"Покупка продуктов\")\n    @allure.title(\"Проверка возможности совершить покупку единственного товара\")\n    def test_success_buying_one_product(app):\n        with allure.step(\"Открыть страницу магазина\"):\n            app.main_page.open_page(\"\")\n        with allure.step(\"Набрать продуктов в корзину\"):\n            app.main_page.random_click_on_buying_one_product()\n        with allure.step(\"Открыть корзину\"):\n            app.main_page.click_basket_icon()\n            app.basket_form.basket_form_is_opened()\n        with allure.step(\"Проверить, что в корзине находятся товары\"):\n            assert app.basket_form.check_shopping_list() != \"Cart is Empty\"\n        with allure.step(\"Нажать кнопку покупки\"):\n>           app.basket_form.click_buying_btn()\n\ntests/Buying/test_success_buying_one_product.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/basket_form.py:48: in click_buying_btn\n    self.find_clickable_element(BasketFormLocator.BUY_BTN).click()\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py:81: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py:710: in _execute\n    return self._parent.execute(command, params)\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:424: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1e3b926f40>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55e226d7c998 \\\\u003Cunknown>\\\\n#21 0x55e226d97eed \\\\u003Cunknown>\\\\n#22 0x7fe41aaf4609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"btn red btn-small\">...</button> is not clickable at point (112, 371). Other element would receive the click: <div id=\"toast-container\">...</div>\nE         (Session info: headless chrome=96.0.4664.110)\nE       Stacktrace:\nE       #0 0x55e226d18ee3 <unknown>\nE       #1 0x55e2267e6608 <unknown>\nE       #2 0x55e226824044 <unknown>\nE       #3 0x55e226821af4 <unknown>\nE       #4 0x55e22681f2da <unknown>\nE       #5 0x55e22681dce2 <unknown>\nE       #6 0x55e2268117b8 <unknown>\nE       #7 0x55e22683a272 <unknown>\nE       #8 0x55e226811063 <unknown>\nE       #9 0x55e22683a37e <unknown>\nE       #10 0x55e22684d3bc <unknown>\nE       #11 0x55e22683a163 <unknown>\nE       #12 0x55e22680fbfc <unknown>\nE       #13 0x55e226810c05 <unknown>\nE       #14 0x55e226d4abaa <unknown>\nE       #15 0x55e226d60651 <unknown>\nE       #16 0x55e226d4bb05 <unknown>\nE       #17 0x55e226d61a68 <unknown>\nE       #18 0x55e226d4005f <unknown>\nE       #19 0x55e226d7c818 <unknown>\nE       #20 0x55e226d7c998 <unknown>\nE       #21 0x55e226d97eed <unknown>\nE       #22 0x7fe41aaf4609 <unknown>\n\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:247: ElementClickInterceptedException",
    "steps" : [ {
      "name" : "Открыть страницу магазина",
      "time" : {
        "start" : 1639937658987,
        "stop" : 1639937659022,
        "duration" : 35
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Набрать продуктов в корзину",
      "time" : {
        "start" : 1639937659022,
        "stop" : 1639937659392,
        "duration" : 370
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Открыть корзину",
      "time" : {
        "start" : 1639937659392,
        "stop" : 1639937659457,
        "duration" : 65
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Проверить, что в корзине находятся товары",
      "time" : {
        "start" : 1639937659457,
        "stop" : 1639937660479,
        "duration" : 1022
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Нажать кнопку покупки",
      "time" : {
        "start" : 1639937660479,
        "stop" : 1639937662554,
        "duration" : 2075
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"btn red btn-small\">...</button> is not clickable at point (112, 371). Other element would receive the click: <div id=\"toast-container\">...</div>\n  (Session info: headless chrome=96.0.4664.110)\nStacktrace:\n#0 0x55e226d18ee3 <unknown>\n#1 0x55e2267e6608 <unknown>\n#2 0x55e226824044 <unknown>\n#3 0x55e226821af4 <unknown>\n#4 0x55e22681f2da <unknown>\n#5 0x55e22681dce2 <unknown>\n#6 0x55e2268117b8 <unknown>\n#7 0x55e22683a272 <unknown>\n#8 0x55e226811063 <unknown>\n#9 0x55e22683a37e <unknown>\n#10 0x55e22684d3bc <unknown>\n#11 0x55e22683a163 <unknown>\n#12 0x55e22680fbfc <unknown>\n#13 0x55e226810c05 <unknown>\n#14 0x55e226d4abaa <unknown>\n#15 0x55e226d60651 <unknown>\n#16 0x55e226d4bb05 <unknown>\n#17 0x55e226d61a68 <unknown>\n#18 0x55e226d4005f <unknown>\n#19 0x55e226d7c818 <unknown>\n#20 0x55e226d7c998 <unknown>\n#21 0x55e226d97eed <unknown>\n#22 0x7fe41aaf4609 <unknown>\n\n",
      "statusTrace" : "  File \"/home/runner/work/Innopolis_final/Innopolis_final/tests/Buying/test_success_buying_one_product.py\", line 18, in test_success_buying_one_product\n    app.basket_form.click_buying_btn()\n  File \"/home/runner/work/Innopolis_final/Innopolis_final/pages/basket_form.py\", line 48, in click_buying_btn\n    self.find_clickable_element(BasketFormLocator.BUY_BTN).click()\n  File \"/home/runner/.local/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py\", line 81, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/home/runner/.local/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py\", line 710, in _execute\n    return self._parent.execute(command, params)\n  File \"/home/runner/.local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py\", line 424, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.local/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py\", line 247, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "95bda346df3f9d97",
      "name" : "log",
      "source" : "95bda346df3f9d97.txt",
      "type" : "text/plain",
      "size" : 83
    } ],
    "parameters" : [ ],
    "stepsCount" : 5,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "screenshot_after_test::0",
    "time" : {
      "start" : 1639937662583,
      "stop" : 1639937662670,
      "duration" : 87
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "6f29dc95381f5ed1",
      "name" : "screenshot",
      "source" : "6f29dc95381f5ed1.png",
      "type" : "image/png",
      "size" : 100885
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "app::0",
    "time" : {
      "start" : 1639937668370,
      "stop" : 1639937668431,
      "duration" : 61
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Покупка продуктов"
  }, {
    "name" : "epic",
    "value" : "Продуктовый магазин"
  }, {
    "name" : "parentSuite",
    "value" : "tests.Buying"
  }, {
    "name" : "suite",
    "value" : "test_success_buying_one_product"
  }, {
    "name" : "host",
    "value" : "fv-az128-141"
  }, {
    "name" : "thread",
    "value" : "2829-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.Buying.test_success_buying_one_product"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 5,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 5
      },
      "items" : [ {
        "uid" : "6ae0bb23ad704103",
        "reportUrl" : "https://gonuskus.github.io/Innopolis_final/35//#testresult/6ae0bb23ad704103",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"btn red btn-small\">...</button> is not clickable at point (112, 371). Other element would receive the click: <div id=\"toast-container\">...</div>\n  (Session info: headless chrome=96.0.4664.110)\nStacktrace:\n#0 0x559ac1408ee3 <unknown>\n#1 0x559ac0ed6608 <unknown>\n#2 0x559ac0f14044 <unknown>\n#3 0x559ac0f11af4 <unknown>\n#4 0x559ac0f0f2da <unknown>\n#5 0x559ac0f0dce2 <unknown>\n#6 0x559ac0f017b8 <unknown>\n#7 0x559ac0f2a272 <unknown>\n#8 0x559ac0f01063 <unknown>\n#9 0x559ac0f2a37e <unknown>\n#10 0x559ac0f3d3bc <unknown>\n#11 0x559ac0f2a163 <unknown>\n#12 0x559ac0effbfc <unknown>\n#13 0x559ac0f00c05 <unknown>\n#14 0x559ac143abaa <unknown>\n#15 0x559ac1450651 <unknown>\n#16 0x559ac143bb05 <unknown>\n#17 0x559ac1451a68 <unknown>\n#18 0x559ac143005f <unknown>\n#19 0x559ac146c818 <unknown>\n#20 0x559ac146c998 <unknown>\n#21 0x559ac1487eed <unknown>\n#22 0x7f8bf6c7a609 <unknown>",
        "time" : {
          "start" : 1639937002241,
          "stop" : 1639937005843,
          "duration" : 3602
        }
      }, {
        "uid" : "6d190bbb2f42d1be",
        "reportUrl" : "https://gonuskus.github.io/Innopolis_final/34//#testresult/6d190bbb2f42d1be",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"btn red btn-small\">...</button> is not clickable at point (112, 371). Other element would receive the click: <div id=\"toast-container\">...</div>\n  (Session info: headless chrome=96.0.4664.110)\nStacktrace:\n#0 0x561581866ee3 <unknown>\n#1 0x561581334608 <unknown>\n#2 0x561581372044 <unknown>\n#3 0x56158136faf4 <unknown>\n#4 0x56158136d2da <unknown>\n#5 0x56158136bce2 <unknown>\n#6 0x56158135f7b8 <unknown>\n#7 0x561581388272 <unknown>\n#8 0x56158135f063 <unknown>\n#9 0x56158138837e <unknown>\n#10 0x56158139b3bc <unknown>\n#11 0x561581388163 <unknown>\n#12 0x56158135dbfc <unknown>\n#13 0x56158135ec05 <unknown>\n#14 0x561581898baa <unknown>\n#15 0x5615818ae651 <unknown>\n#16 0x561581899b05 <unknown>\n#17 0x5615818afa68 <unknown>\n#18 0x56158188e05f <unknown>\n#19 0x5615818ca818 <unknown>\n#20 0x5615818ca998 <unknown>\n#21 0x5615818e5eed <unknown>\n#22 0x7f94cef54609 <unknown>",
        "time" : {
          "start" : 1639934273648,
          "stop" : 1639934276978,
          "duration" : 3330
        }
      }, {
        "uid" : "288e5ea708599f49",
        "reportUrl" : "https://gonuskus.github.io/Innopolis_final/33//#testresult/288e5ea708599f49",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"btn red btn-small\">...</button> is not clickable at point (112, 371). Other element would receive the click: <div id=\"toast-container\">...</div>\n  (Session info: headless chrome=96.0.4664.110)\nStacktrace:\n#0 0x558e1a3c5ee3 <unknown>\n#1 0x558e19e93608 <unknown>\n#2 0x558e19ed1044 <unknown>\n#3 0x558e19eceaf4 <unknown>\n#4 0x558e19ecc2da <unknown>\n#5 0x558e19ecace2 <unknown>\n#6 0x558e19ebe7b8 <unknown>\n#7 0x558e19ee7272 <unknown>\n#8 0x558e19ebe063 <unknown>\n#9 0x558e19ee737e <unknown>\n#10 0x558e19efa3bc <unknown>\n#11 0x558e19ee7163 <unknown>\n#12 0x558e19ebcbfc <unknown>\n#13 0x558e19ebdc05 <unknown>\n#14 0x558e1a3f7baa <unknown>\n#15 0x558e1a40d651 <unknown>\n#16 0x558e1a3f8b05 <unknown>\n#17 0x558e1a40ea68 <unknown>\n#18 0x558e1a3ed05f <unknown>\n#19 0x558e1a429818 <unknown>\n#20 0x558e1a429998 <unknown>\n#21 0x558e1a444eed <unknown>\n#22 0x7fbe07ce6609 <unknown>",
        "time" : {
          "start" : 1639933182709,
          "stop" : 1639933185253,
          "duration" : 2544
        }
      }, {
        "uid" : "7a49fd80c907d11d",
        "reportUrl" : "https://gonuskus.github.io/Innopolis_final/32//#testresult/7a49fd80c907d11d",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"btn red btn-small\">...</button> is not clickable at point (112, 371). Other element would receive the click: <div id=\"toast-container\">...</div>\n  (Session info: headless chrome=96.0.4664.110)\nStacktrace:\n#0 0x55b12c790ee3 <unknown>\n#1 0x55b12c25e608 <unknown>\n#2 0x55b12c29c044 <unknown>\n#3 0x55b12c299af4 <unknown>\n#4 0x55b12c2972da <unknown>\n#5 0x55b12c295ce2 <unknown>\n#6 0x55b12c2897b8 <unknown>\n#7 0x55b12c2b2272 <unknown>\n#8 0x55b12c289063 <unknown>\n#9 0x55b12c2b237e <unknown>\n#10 0x55b12c2c53bc <unknown>\n#11 0x55b12c2b2163 <unknown>\n#12 0x55b12c287bfc <unknown>\n#13 0x55b12c288c05 <unknown>\n#14 0x55b12c7c2baa <unknown>\n#15 0x55b12c7d8651 <unknown>\n#16 0x55b12c7c3b05 <unknown>\n#17 0x55b12c7d9a68 <unknown>\n#18 0x55b12c7b805f <unknown>\n#19 0x55b12c7f4818 <unknown>\n#20 0x55b12c7f4998 <unknown>\n#21 0x55b12c80feed <unknown>\n#22 0x7f647ac3c609 <unknown>",
        "time" : {
          "start" : 1639904762264,
          "stop" : 1639904764720,
          "duration" : 2456
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "a151aca08004bf12.json",
  "parameterValues" : [ ]
}